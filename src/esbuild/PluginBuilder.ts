import esbuild, { type BuildOptions } from "esbuild";
import process from "node:process";
import builtins from "builtin-modules";
import { existsSync } from "node:fs";
import {
  cp,
  mkdir,
  rm,
  writeFile
} from "node:fs/promises";
import { resolvePathFromRoot } from "../Root.ts";
import { TaskResult } from "../TaskResult.ts";
import { readNpmPackage } from "../Npm.ts";
import preprocessPlugin from "./preprocessPlugin.ts";
import lintPlugin from "./lintPlugin.ts";
import fixSourceMapsPlugin from "./fixSourceMapsPlugin.ts";
import copyToObsidianPluginsFolderPlugin from "./copyToObsidianPluginsFolderPlugin.ts";

export enum BuildMode {
  Development,
  Production
}

export async function buildPlugin({
  mode,
  obsidianConfigDir = process.env["OBSIDIAN_CONFIG_DIR"]
}: {
  mode: BuildMode
  obsidianConfigDir?: string
}): Promise<TaskResult> {
  const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

  const isProductionBuild = mode === BuildMode.Production;

  const distDir = resolvePathFromRoot(isProductionBuild ? "dist/build" : "dist/dev");
  if (existsSync(distDir)) {
    await rm(distDir, { recursive: true });
  }
  await mkdir(distDir, { recursive: true });

  const distFileNames = [
    "manifest.json",
    "styles.css"
  ];
  if (!isProductionBuild) {
    await writeFile(`${distDir}/.hotreload`, "", "utf8");
  }

  for (const fileName of distFileNames) {
    const localFile = resolvePathFromRoot(fileName);
    const distFile = `${distDir}/${fileName}`;

    if (existsSync(localFile)) {
      await cp(localFile, distFile);
    }
  }

  const distPath = `${distDir}/main.js`;

  const npmPackage = await readNpmPackage();
  const pluginName = npmPackage.name;

  const buildOptions: BuildOptions = {
    banner: {
      js: banner,
    },
    bundle: true,
    entryPoints: [resolvePathFromRoot("src/main.ts")],
    external: [
      "obsidian",
      "electron",
      "@codemirror/autocomplete",
      "@codemirror/collab",
      "@codemirror/commands",
      "@codemirror/language",
      "@codemirror/lint",
      "@codemirror/search",
      "@codemirror/state",
      "@codemirror/view",
      "@lezer/common",
      "@lezer/highlight",
      "@lezer/lr",
      ...builtins],
    format: "cjs",
    logLevel: "info",
    outfile: distPath,
    platform: "node",
    plugins: [
      preprocessPlugin(),
      lintPlugin(isProductionBuild),
      fixSourceMapsPlugin(isProductionBuild, distPath, pluginName),
      copyToObsidianPluginsFolderPlugin(isProductionBuild, distDir, obsidianConfigDir, pluginName)
    ],
    sourcemap: isProductionBuild ? false : "inline",
    target: "esnext",
    treeShaking: true
  };

  const context = await esbuild.context(buildOptions);

  if (isProductionBuild) {
    const result = await context.rebuild();
    const isSuccess = result.errors.length == 0 && result.warnings.length == 0;
    return TaskResult.CreateSuccessResult(isSuccess);
  } else {
    await context.watch();
    return TaskResult.DoNotExit();
  }
}
